<?php


namespace Random;


use Dotenv\Dotenv;
use Exception;
use Random\Application\Environment;

/**
 * Class Application
 * @package Random
 */
final class Application implements ApplicationInterface
{
    /**
     * Donenv instance
     *
     * @var Dotenv
     */
    private $environment;

    /**
     * Root path string
     *
     * @var string
     */
    private $path;

    /**
     * Image instance wrapped GD function
     *
     * @var Image
     */
    private $image;

    /**
     * Singleton instance
     *
     * @var Application
     */
    private static $instance;

    /**
     * Singleton instance getter
     *
     * @param string|null $path
     * @return Application
     */
    public static function getInstance(string $path): Application
    {
        return static::$instance ?: static::$instance = new self($path);
    }

    /**
     * Environment getter
     *
     * @inheritDoc
     */
    public function getEnvironment(): Dotenv
    {
        return $this->environment;
    }

    /**
     * Setup response header
     * return image as png
     *
     * @param int $code
     */
    private function response(int $code)
    {
        if ($code == 200) {
            header('HTTP/1.1 200 OK');
            header("Content-type: image/png");
            $this->image->asPNG();
        } else {
            header('HTTP/1.1 400 Bad Request');
        }
    }

    /**
     * Draw random noise on canvas.
     * Noise was generated by $algorithmName implementation
     *
     * @param string $algorithmName
     */
    public function process(string $algorithmName): void
    {
        try {
            $algorithm = AlgorithmStaticFactory::factory(
                $algorithmName,
                $this->environment->get(Environment::WIDTH) - 1,
                $this->environment->get(Environment::HEIGHT) - 1
            );

            foreach ($algorithm->sequence() as $coordinates) {
                $this->image->drawPoint($coordinates[0], $coordinates[1]);
            }

            $this->response(200);
        } catch (Exception $e) {
            $this->response(400);
        }
    }

    /**
     * App constructor.
     * @param string $path
     */
    private function __construct(string $path)
    {
        $this->path = $path;
        $this->environment = new Environment($path);

        $this->image = new Image(
            $this->environment->get(Environment::WIDTH),
            $this->environment->get(Environment::HEIGHT),
            $this->environment->get(Environment::IMAGE_BACKGROUND_COLOR),
            $this->environment->get(Environment::IMAGE_NOISE_PIXEL_COLOR)
        );
    }

    /** @noinspection PhpUnusedPrivateMethodInspection */
    private function __clone()
    {
    }

    /** @noinspection PhpUnusedPrivateMethodInspection */
    private function __wakeup()
    {
    }
}